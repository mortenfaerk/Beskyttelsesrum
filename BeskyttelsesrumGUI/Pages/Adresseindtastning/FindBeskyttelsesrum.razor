@using BeskyttelsesrumGUI.Pages.Adresseindtastning.Components;
@using BeskyttelsesrumGUI.Models;
@using BeskyttelsesrumGUI.Services;
@inject BeskyttelsesrumService _beskyttelsesrumService;


        <AdresseIndtastning @ref="@AdresseIndtastning" AdresseChanged="@HandleAddress"/>
        <DistanceSelector maxRange="50" minRange="1" RangeIntChanged="@TryToUpdateList"/>

@if (Beskyttelsesrum != null)
{
    @if (Beskyttelsesrum.Count() > 0)
    {
    <Grid TItem="BeskyttelsesrumViewModel" Class="table table-hover table-bordered table-striped" AllowPaging="true" PageSize="10" Responsive="true" Data="@Beskyttelsesrum" AllowSorting="true">
        <GridColumns>
                <GridColumn TItem="BeskyttelsesrumViewModel" HeaderText="Adresse" PropertyName="Adresse" SortKeySelector="item => item.BbrBeskyttelserum.Adresse">
                @context.BbrBeskyttelserum.Adresse
            </GridColumn>
                <GridColumn TItem="BeskyttelsesrumViewModel" HeaderText="Antal pladser" PropertyName="SikringsrumAnt" SortKeySelector="item => item.BbrBeskyttelserum.SikringsrumAnt">
                @context.BbrBeskyttelserum.SikringsrumAnt
                </GridColumn>
            <GridColumn TItem="BeskyttelsesrumViewModel" HeaderText="Afstand" PropertyName="Afstand" SortKeySelector="item => item.Distance" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">
                    @context.DistanceFormatted Km
            </GridColumn>
        </GridColumns>
        </Grid>
    }
}
else if(!WaitingForResponse && Adresse != null)
    {
        <span>Der blev ikke fundet nogen beskyttelserum inden for @_selectedRange Km af @Adresse.Adresseringsvejnavn</span>
    }else if(WaitingForResponse){
        <span>Henter beskyttelsesrum</span>
    }

@code {
    private AdresseIndtastning AdresseIndtastning = default!;
    private DAWAAdress? Adresse;
    private List<BeskyttelsesrumViewModel>? Beskyttelsesrum;
    private HashSet<BeskyttelsesrumViewModel> selectedBeskyttelsesrum = new();
    private int _selectedRangeBackingField;

    private int _selectedRange
    {
        get => _selectedRangeBackingField;
        set
        {
            if (_selectedRangeBackingField != value)
            {
                _selectedRangeBackingField = value;
                TryToUpdateList();
            }
        }
    }
    private bool WaitingForResponse = false;

    protected override Task OnInitializedAsync()
    {
        _selectedRange = 5;
        return base.OnInitializedAsync();
    }
    private async Task TryToUpdateList()
    {
        if (Adresse == null)
        {
            return;
        }

        try
        {
            Beskyttelsesrum = null;
            WaitingForResponse = true;
            var beskytRum = await _beskyttelsesrumService.GetBeskyttelsesrumsAsync(Adresse, _selectedRange * 1000);
            Beskyttelsesrum = new List<BeskyttelsesrumViewModel>();
            foreach (BbrBeskyttelsesrum rum in beskytRum)
            {
                BeskyttelsesrumViewModel viewModel = new(Adresse, rum, _beskyttelsesrumService);
                Beskyttelsesrum.Add(viewModel);
            }
            WaitingForResponse = false;
        }
       
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
        finally
        {
            WaitingForResponse = false;
        }
    }
    private async Task HandleAddress(DAWAAdress adresse)
    {
        Adresse = adresse;
        await TryToUpdateList();
    }
}