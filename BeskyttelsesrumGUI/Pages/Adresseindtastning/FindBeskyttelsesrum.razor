@using BeskyttelsesrumGUI.Pages.Adresseindtastning.Components;
@using BeskyttelsesrumGUI.Models;
@using BeskyttelsesrumGUI.Services;
@inject BeskyttelsesrumService _beskyttelsesrumService;


        <AdresseIndtastning @ref="@AdresseIndtastning" AdresseChanged="@HandleAddress"/>
<label for="rangeInput">Radius:</label>
<br />
<div class="d-flex flex-row mb-3">
        <RangeInput TValue="int" id="rangeInput" @bind-Value="range" Min="1" Max="50" />
    <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="amount1" ValueChanged="@TryToUpdateList()">@range Km</Badge>
</div>
@if (Beskyttelsesrum != null)
{
    @if (Beskyttelsesrum.Count() > 0)
    {
    <Grid TItem="BbrBeskyttelsesrum" Class="table table-hover table-bordered table-striped" AllowPaging="true" PageSize="10" Responsive="true" Data="@Beskyttelsesrum" AllowSorting="true">
        <GridColumns>
            <GridColumn TItem="BbrBeskyttelsesrum" HeaderText="Adresse" PropertyName="Adresse" SortKeySelector="item => item.Adresse">
                @context.Adresse
            </GridColumn>
            <GridColumn TItem="BbrBeskyttelsesrum" HeaderText="Antal pladser" PropertyName="SikringsrumAnt" SortKeySelector="item => item.SikringsrumAnt">
                @context.SikringsrumAnt
            </GridColumn>
        </GridColumns>
        </Grid>
    }
    else if(!WaitingForResponse)
    {
        <span>Der blev ikke fundet nogen beskyttelserum inden for @_selectedRange Km af @Adresse.Adresseringsvejnavn</span>
    }else{
        <span>Henter beskyttelsesrum</span>
    }
}
@code {
    private AdresseIndtastning AdresseIndtastning = default!;
    private DAWAAdress? Adresse;
    private IEnumerable<BbrBeskyttelsesrum>? Beskyttelsesrum;
    private HashSet<BbrBeskyttelsesrum> selectedBeskyttelsesrum = new();
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
    private int _selectedRange = 5;
    private bool WaitingForResponse;
    private int range
    {
        get => _selectedRange;
        set
        {
            _selectedRange = value;
            TryToUpdateList();
        }
    }
    private async Task TryToUpdateList()
    {




        if (Adresse != null)
        {
            try
            {
                _cancellationTokenSource.Cancel();
                _cancellationTokenSource.Dispose(); // Dispose the old CancellationTokenSource
                _cancellationTokenSource = new CancellationTokenSource();
                var token = _cancellationTokenSource.Token;
                WaitingForResponse = true;
                Beskyttelsesrum = await _beskyttelsesrumService.GetBeskyttelsesrumsAsync(Adresse, token, _selectedRange * 1000);
                WaitingForResponse = false;
            }
            catch (OperationCanceledException)
            {

            }
            catch (Exception ex)
            {
            }
        }
    }
    private async Task HandleAddress(DAWAAdress adresse)
    {
        Adresse = adresse;
        await TryToUpdateList();
    }
    public void Dispose()
    {
        _cancellationTokenSource.Dispose();
    }
}